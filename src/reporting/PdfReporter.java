package reporting;
/*This class is developed by FLT to substantiate the reporting needs
 * of the undergraduate coordinator information system
 * It uses the libraries from iText PDF maker.
 * This will be used to create various reports as needed.
 * 
 */

//import necessary classes
//IO
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
//PDF -- iText pdf library
import com.itextpdf.text.Anchor;
import com.itextpdf.text.Image;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

//import application specific classes
import dto.*;
import util.GetAbsolutePath;
import dao.*;


//main class
public class PdfReporter {
	
	
		//Information and fonts
        private static String FILE = "report.pdf";
        private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
        private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL, BaseColor.RED);
        private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16, Font.BOLD);
        private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);

        
        //main method that glues the rest of this class together
        //Takes in the student in question
        public static void doIt(Student student, OutputStream out, String path) {
                try {
                		//create a new document
                        Document document = new Document();
                        PdfWriter.getInstance(document, out);
                        //open it for editing
                        document.open();
                        //Add meta data to the document
                        addMetaData(document, student);
                        //give the document a title page
                        addTitlePage(document, student, path);
                        //add documents content
                        addContent(document, student);
                        //document is finished, close it
                        document.close();
                } catch (Exception e) {
                	//Error caused by the above process
                        e.printStackTrace();
                }
        }

        /*iText allows documents (pdf) to contain metadatam which can be useful
         * Such thigns as titles, subjects, keywords and authors can be added
         */
        private static void addMetaData(Document document, Student student) {
        		//Documents title
                document.addTitle(student.getFirstName() + " " + student.getLastName()+ " report");
                //the subject of the document
                document.addSubject("report on student, bookings, offenses");
                //documents key words
                document.addKeywords("student, report, offense, booking");
                //the author of the document
                document.addAuthor("FLT:UGCIS");
                //the creator -- in our case the system
                document.addCreator("UGCIS");
        }

        
        //this class produces the reports cover page.
        private static void addTitlePage(Document document, Student student, String mainPath)
                        throws DocumentException, IOException {
                Paragraph preface = new Paragraph();
                
                
                // We add one empty line
                addEmptyLine(preface, 1);
                // Lets write a big header
                GetAbsolutePath gp = new GetAbsolutePath();
                String path = "util/images/UNSW_logo_0.png";
                String pathTwo = "util/images/FLT.png";
                
                Image img = Image.getInstance(gp.getAbsolutePath(path));
                document.add(img);
                preface.add(new Paragraph("Report generated for: "+student.getFirstName() + " " + student.getLastName(), catFont));

                addEmptyLine(preface, 1);
                // Will create: Report generated by: _name, _date
                preface.add(new Paragraph(
                                "Report generated by: " + "UGCIS system" + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                                smallBold));
                Image img1 = Image.getInstance(gp.getAbsolutePath(pathTwo));
                document.add(img1);

                preface.add(new Paragraph(
                                "Reports generated by current system data, if there are errors in mismatched information, please consult the systems data and rectify the issue there, and re generate this document.",
                                redFont));

                document.add(preface);
                // Start a new page
                document.newPage();
        }

        private static void addContent(Document document, Student student) throws DocumentException, ParseException {
                Anchor anchor = new Anchor("Student details", catFont);
                anchor.setName("Infomration");

                // Second parameter is the number of the chapter
                Chapter catPart = new Chapter(new Paragraph(anchor), 1);
                
                //Print the students university details
                Paragraph subPara = new Paragraph("Uni specific details", subFont);
                Section subCatPart = catPart.addSection(subPara);
                subCatPart.add(new Paragraph("\t   Student email: " +student.getEmail()));
                subCatPart.add(new Paragraph("\t   Student zID: " +student.getzId()));
                subCatPart.add(new Paragraph("\t   Student WAM: "+student.getCurrentWam()));
                Program program = ProgramDAO.selectById(student.getProgramId());
                subCatPart.add(new Paragraph("\t   Student Program: " + program.getProgramCode() + " " + program.getProgramName()));
                subCatPart.add(new Paragraph("\t   Student type: " + student.getType()));
                subCatPart.add(new Paragraph("\t   Student enrolment year: " + student.getYearEnrolled()));

                //now print the specific personal details
                subPara = new Paragraph("Personal Details", subFont);
                subCatPart = catPart.addSection(subPara);
                subCatPart.add(new Paragraph("\t   Student first name: " + student.getFirstName()));
                subCatPart.add(new Paragraph("\t   Student last name: " + student.getLastName()));
                subCatPart.add(new Paragraph("\t   Student private email: " +student.getPrivEmail()));
                subCatPart.add(new Paragraph("\t   Student private phone: " +student.getPrivPhone()));
                subCatPart.add(new Paragraph("\t   Student work phone: " +student.getWorkPhone()));
                subCatPart.add(new Paragraph("\t   Student address: " +student.getAddress()));
                subCatPart.add(new Paragraph("\t   Student gender: " +student.getGender()));
                
                //print the students courses that they are enrolled in
                subPara = new Paragraph("Enrolled course's details", subFont);
                subCatPart = catPart.addSection(subPara);
                //use the creaseList method to do this
                createList(subCatPart, student);
                Paragraph paragraph = new Paragraph();
                addEmptyLine(paragraph, 5);
                subCatPart.add(paragraph);

               
                document.add(catPart);

                // Next section - students appointments
                anchor = new Anchor("Appointment Details", catFont);
                anchor.setName("Appointment details");

                //The chapter numbering
                catPart = new Chapter(new Paragraph(anchor), 2);
                
                //Get all bookings for the student
                ArrayList<Booking> bookings = (ArrayList<Booking>) BookingDAO.selectAllByZid(student.getzId());
                
                if(bookings != null){
	                //For each booking, create a section for the student
	                for(Booking b: bookings){
		                subPara = new Paragraph("Booking on: "+ b.getStartDate(), subFont);
		                subCatPart = catPart.addSection(subPara);
		                subCatPart.add(new Paragraph("Booking details: "));
		                //firstly compare dates
		                //this is so the sentence can be contextually correct
		                Calendar tempDate = Calendar.getInstance();
		                Calendar nowDate = Calendar.getInstance();
		                Calendar compareDate = Calendar.getInstance();
		                
		                //get bookings date
		                String date = b.getEndDate();
		                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd kk:mm");
		                sdf.setCalendar(nowDate);
		                compareDate.setTime(sdf.parse(date));
		                
			                //implement
			                String sentence = "";
			                if(nowDate.compareTo(compareDate) < 0){
			                	//nowDate is greater than compareDate
			                	sentence = "	Booking time was: ";
			                } else if(nowDate.compareTo(compareDate) > 0){
			                	//nowDate is less than compateDate
			                	sentence = "	Booking time will be: ";
			                } else {
			                	//nowDate and compareDate are even
			                	sentence = "	Booking time is: ";
			                }
		                
			            //add booking details
		                subCatPart.add(new Paragraph("\t   "+sentence + b.getStartDate()));
		                subCatPart.add(new Paragraph("\t   Appointment category: "+ b.getCategory()));
		                subCatPart.add(new Paragraph("\t   Appointment location: " + b.getLocation()));
		                subCatPart.add(new Paragraph("\t   Appointment priority:" + b.getPriority()));
		                
		                //add the notes made by the coordintor if there are any
		                ArrayList<Note> notes = (ArrayList<Note>) NoteDAO.selectAllByBookingId(b.getBookingId());
		                subCatPart.add(new Paragraph("Notes made from this appointment"));
		                if(notes != null){
			                for(Note n: notes){
			                	String noteInfo = n.getTexts();
			                	
			                	if(notes != null){
			                		subCatPart.add(new Paragraph("\t   Note text: "));
			                		Paragraph para1 = new Paragraph(noteInfo);
			                		para1.setIndentationLeft(50);
			                		subCatPart.add(para1);
			                		
			                	}
			                }
		                } else {
		                	//in the case that there are no notes
		                	subCatPart.add(new Paragraph("There have been no notes made on this appointment"));
		                }
	                }
                } else {
                	subPara = new Paragraph("No bookings made", subFont);
	                subCatPart = catPart.addSection(subPara);
	                subCatPart.add(new Paragraph("	This student has made no appointments to to date."));
                }

                // now add all this to the document
                document.add(catPart);

        }

        //In case we need a table
        private static void createTable(Section subCatPart)
                        throws BadElementException {
                PdfPTable table = new PdfPTable(3);

                // t.setBorderColor(BaseColor.GRAY);
                // t.setPadding(4);
                // t.setSpacing(4);
                // t.setBorderWidth(1);

                PdfPCell c1 = new PdfPCell(new Phrase("Table Header 1"));
                c1.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(c1);

                c1 = new PdfPCell(new Phrase("Table Header 2"));
                c1.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(c1);

                c1 = new PdfPCell(new Phrase("Table Header 3"));
                c1.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(c1);
                table.setHeaderRows(1);

                table.addCell("1.0");
                table.addCell("1.1");
                table.addCell("1.2");
                table.addCell("2.1");
                table.addCell("2.2");
                table.addCell("2.3");

                subCatPart.add(table);

        }

        private static void createList(Section subCatPart, Student student) {
        	//this will create a list of all student courses and their marks in each course
        	ArrayList<Enrolment> enrolments = (ArrayList<Enrolment>) EnrolmentDAO.selectByStudentId(student.getStudentId());
        	
        	
        	
                List list = new List(true, false, 10);
                if(enrolments != null){
	                for(Enrolment s: enrolments){
	                	Course course = CourseDAO.selectById(s.getCourseId());
		                list.add(new ListItem("	Course: " + course.getCourseCode() + " | Mark: " + s.getMark() + " | semYear: " + s.getSemYear()));
	                }
                } else {
                	list.add(new ListItem("	Student has no enrolled courses in the UGCIS system"));
                }
                subCatPart.add(list);
        }

        private static void addEmptyLine(Paragraph paragraph, int number) {
                for (int i = 0; i < number; i++) {
                        paragraph.add(new Paragraph(" "));
                }
        }
}